rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      // Allow authenticated users to read any user document (for email searches)
      // but only allow users to write to their own document
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    match /boards/{boardId} {
      function isBoardMember() {
        return request.auth.uid in resource.data.members || request.auth.uid == resource.data.owner;
      }
      
      function isBoardMemberForTasks() {
        return request.auth.uid in get(/databases/$(database)/documents/boards/$(boardId)).data.members || 
               request.auth.uid == get(/databases/$(database)/documents/boards/$(boardId)).data.owner;
      }

      allow create: if request.auth != null && 
                      request.resource.data.owner == request.auth.uid;
      allow list: if request.auth != null;
      allow read: if request.auth != null && isBoardMember();
      // Temporarily very permissive for debugging
      allow update: if request.auth != null;
      allow delete: if request.auth != null && request.auth.uid == resource.data.owner;

      match /tasks/{taskId} {
        allow list, read, create, update, delete: if isBoardMemberForTasks();
        
        match /subtasks/{subtaskId} {
          allow list, read, create, update, delete: if isBoardMemberForTasks();
        }
      }
    }

    // Collection group queries for notifications and My Tasks page
    match /{path=**}/tasks/{taskId} {
      // Allow users to read tasks they own OR are assigned to (for notifications and My Tasks)
      allow read: if request.auth != null && 
                    (resource.data.owner == request.auth.uid || 
                     resource.data.assignedTo == request.auth.uid);
    }

    match /{path=**}/subtasks/{subtaskId} {
      // Allow users to read subtasks assigned to them (for notifications and My Tasks)
      allow read: if request.auth != null && resource.data.assignedTo == request.auth.uid;
    }
  }
}